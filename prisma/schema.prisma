// Define the Prisma schema for your database
datasource db {
  provider = "postgresql" // You can change this to another supported database like MySQL, SQLite, etc.
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Lead {
  id         Int          @id @default(autoincrement())
  firstname  String
  lastname   String
  contact_no String? // Optional field
  email      String?      @unique
  dns        Boolean      @default(true)
  addressId  Int // Foreign key for Address
  Address    Address      @relation(fields: [addressId], references: [id]) // Many-to-one relation
  messages   Message[]
  lists      ListOnLead[]
  created    DateTime     @default(now())
  updated    DateTime     @updatedAt
}

model ListOnLead {
  listId Int
  leadId Int
  list   List @relation(fields: [listId], references: [list_id])
  lead   Lead @relation(fields: [leadId], references: [id])

  @@id([listId, leadId])
}

// Messages
model Message {
  id                 Int              @id @default(autoincrement())
  destination        String
  data               String
  flash              Boolean          @default(false)
  received           DateTime?
  scheduled_delivery DateTime?
  lead_id            Int?
  Lead               Lead?            @relation(fields: [lead_id], references: [id])
  delivery_reports   DeliveryReport[]
}

// Delivery Reports
model DeliveryReport {
  id                 Int      @id @default(autoincrement())
  destination_number String
  code               Int
  dlr_body           String
  timestamp          DateTime
  Message            Message? @relation(fields: [msg_id], references: [id])
  msg_id             Int?
}

// Lists
model List {
  list_id       Int             @id @default(autoincrement())
  name          String
  description   String?
  type          String
  created       DateTime        @default(now())
  updated       DateTime        @updatedAt
  tags          String[]
  leads         ListOnLead[]
  campaigns     Campaign[]      @relation("ListToCampaign")
  CampaignLists CampaignLists[]
}

// Campaigns
model Campaign {
  id            Int             @id @default(autoincrement())
  name          String
  lists         List[]          @relation("ListToCampaign")
  created       DateTime        @default(now())
  updated       DateTime        @updatedAt
  ended         DateTime?
  status        String
  CampaignLists CampaignLists[]
}

model CampaignLists {
  listId     Int
  campaignId Int
  List       List     @relation(fields: [listId], references: [list_id])
  Campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@id([listId, campaignId])
}

enum CustomerStatus {
  Order
  Active
  Cancelled
  Terminated
}

enum CustomerSubStatus {
  Order_Received
  Order_Registered
  Installation_Issue
  Lead_In_Install_Booked
  Pre_Install_Check_Booked
  Pre_Install_Failed
  Lead_In_Failed
  Faceplate_Installed_Awaiting_CPE
  Install_Complete_Activation_Required
  Activated
  Cancelled
  Terminated
}

// Customers
model Customer {
  id                       Int               @id @default(autoincrement())
  ho_cmid                  Int?
  firstname                String
  lastname                 String
  dob                      DateTime
  mobile                   String
  email                    String            @unique
  bundleId                 Int?
  Bundle                   Bundle?           @relation(fields: [bundleId], references: [id])
  ordering_date            DateTime?
  termination_date         DateTime?
  activation_date          DateTime?
  cancellation_date        DateTime?
  installation_appointment DateTime?
  dns                      Boolean           @default(true)
  addressId                Int // Foreign key for Address
  Address                  Address           @relation(fields: [addressId], references: [id]) // Many-to-one relation
  customer_status          CustomerStatus
  customer_sub_status      CustomerSubStatus
  total_wifi               Boolean
  phone                    Boolean
  total_monthly_cost       Int
  marketing_pref           Boolean
  email_alias              String?           @unique
}

// Bundles
model Bundle {
  id             Int        @id @default(autoincrement())
  name           String
  speed          Int
  contractLength Int        @map("contract_length")
  minSpeed       Int        @map("min_speed")
  upSpeed        Int        @map("up_speed")
  downSpeed      Int        @map("down_speed")
  promoPrice     Float      @map("promo_price")
  oocPrice       Float      @map("ooc_price") // Out-of-contract price
  Customers      Customer[]
  activationFee  Int
}

//Addresses
model Address {
  id           Int        @id @default(autoincrement())
  line1        String
  line2        String?
  line3        String?
  line4        String?
  line5        String?
  line6        String?
  postCode     String
  country      String?
  latitude     String?
  longitude    String?
  buildingType String?    @map("building_type")
  account      Int?
  siteType     String?    @map("site_type")
  Customers    Customer[] // Assumes an optional one-to-many relationship
  Leads        Lead[] // Assumes an optional one-to-many relationship
}
